Open source refers to software or projects that are distributed with a license that allows anyone to view, use, modify, and distribute the source code. This means that the source code of the software is made available to the public for collaboration and improvement
Randomly Questions
. React.js is indeed an open-source JavaScript library primarily used for building user interfaces or UI components, particularly for single-page applications. However, it was not developed solely by Facebook; it was initially developed by Jordan Walke, a software engineer at Facebook, and it was first deployed on Facebook's newsfeed in 2011. It was later open-sourced in 2013.Explain the key features of React.
Virtual DOM
JSX
Component-based architecture
Unidirectional data flow
React hooks (introduced in React 16.8)
Works of react
React uses something called a virtual DOM, which is like a copy of the real DOM. Whenever the data changes, React updates this virtual DOM right away. Then, React compares the virtual DOM to the real DOM to see what has changed and updates only those parts of the real DOM.

What is JSX?

JSX is a syntax extension for JavaScript recommended by React. It allows mixing HTML with JavaScript, making it easier to write React components.

React hooks were introduced in React 16.8.0, which was officially released in February 2019. This release added a new way to use state and other React features without writing a class.



DOM stands for Document Object Model it is the structural representation of the HTML Document. Real DOM is the actual structure represented in the User Interface while Virtual DOM is the memory representation of the same. It is a tree-like Structure consisting of all nodes in an HTML document DOM represents the Ul of your applications.


What is difference between Real Dom and virtual dom?

1 The Real DOM is the actual structure of the webpage,
2 and manipulating it is very resource-intensive.
3 When an element updates, a new DOM is created, making the update process slow.

On the other hand, the Virtual DOM is a lightweight copy of the real DOM. 
Manipulating the Virtual DOM is much easier and faster.
 When an element updates,  React updates this virtual DOM right away. Then, React compares the virtual DOM to the real DOM to see what has changed and updates only those parts of the real DOM.



What is the Virtual DOM in React?

The Virtual DOM is a lightweight copy of the actual DOM in memory. React uses it to improve performance by minimizing the number of direct manipulations to the actual DOM.
Explain the concept of components in React.

Components are the building blocks of a React application. They are reusable, self-contained pieces of code. They serve like javascript function but return jsx.
What are React props?

Props (short for properties) are used to pass data from a parent component to a child component in React.
What is the state in React?


1 In React, state refers to a built-in object that
2 allows you to store and manage data that
3 affects the rendering of components. 
4 It is essential for creating dynamic and interactive applications,
5 as it enables components to re-render in response to data changes.
What is the difference between state and props in React?

Props are passed from parent to child components, and they are immutable. State is managed within a component and can be changed.
Explain the component lifecycle in React.

The component lifecycle consists of three main phases: Mounting, Updating, and Unmounting. Each phase has specific lifecycle methods like componentDidMount, componentDidUpdate, and componentWillUnmount.
What are React hooks?

React hooks are functions that enable the use of state and lifecycle features in functional components. Examples include useState for managing state and useEffect for handling side effects.
What is the purpose of the useEffect hook?

useEffect is used for performing side effects in functional components. It allows you to manage lifecycle events, such as data fetching, subscriptions, or  DOM manipulation.
What is the purpose of the useState hook?

The useState hook is used to add state to functional components. It returns an array with the current state value and a function that allows you to update the state.
Explain the concept of controlled and uncontrolled components in React.

Controlled components are those whose inputs form elements  are controlled by React, while uncontrolled components have their state managed by the DOM itself.
What is React Router, and how does it work?

React Router is a library for handling navigation in React applications. It provides a declarative way to define routes and navigate between different views.
What is the significance of keys in React lists?

Answer: In React.js, the key prop is a special attribute used in lists of elements to help React identify which items have changed, been added, or removed. They are important for maintaining performance and ensuring that elements are re-rendered efficiently.

These questions cover a range of topics related to React.js and can help assess a candidate's understanding of the library and its concepts. Depending on the job position, interviewers may ask more in-depth questions or focus on specific areas of expertise.

20 question of react js
What is React?
limitations of React?
advantages of using React?
Explain Strict Mode in React
Can React Hook replace Redux?
useState() and useEffect() in React?
How to prevent re-renders in React?
Form-Handing & Validation techniques?
What is the application of lazy loading?
In React.js, lazy loading enables dynamic loading of components, splitting the bundle into smaller chunks, improving initial loading times by loading components only when needed, typically using React.lazy() and Suspense.

What is the benefit of error boundaries?
SSR and its benefits in React applications
different ways to style a React component?
Use cases of useEffect() in different scenarios
differences between functional & class components:
differences b/w useMemo( and useCallback() in React
differences b/w controlled & uncontrolled components
How to re-render the view when the browser is resized?
asynchronous operations with async/await and Promises?
How to pass data b/w sibling components using React router
React is a JavaScript library for building user interfaces.
Limitations include a learning curve for beginners and potential performance issues with large-scale applications.

Advantages include virtual DOM for efficient rendering, component-based architecture for reusability, and a large ecosystem of libraries and tools.

Strict Mode in React enables additional checks and warnings for potential issues in development, aiding in debugging and enforcing best practices.

React Hooks can partially replace Redux for state management in simpler applications, offering a more streamlined approach.

To prevent re-renders, optimize components using shouldComponentUpdate for class components or React.memo for functional components.

Form handling and validation in React can be achieved using controlled components with state management and validation libraries like Formik or Yup.


Error boundaries prevent entire React applications from crashing due to unhandled errors, allowing for graceful error handling and user experience.

SSR (Server-Side Rendering) in React improves SEO, initial page load times, and performance by rendering React components on the server before sending them to the client.

Different ways to style React components include inline styles, CSS modules, CSS-in-JS libraries like styled-components, and CSS preprocessors like Sass.

Functional components use functions to define UI, while class components extend React.Component and use the render method.

useMemo() memoizes the result of a function, while useCallback() memoizes a function instance, primarily used to optimize performance in functional components.

To re-render the view on browser resize, utilize the window.resize event listener and update state or trigger a re-render accordingly
.
Asynchronous operations in React can be handled using async/await syntax with Promises, allowing for cleaner and more readable asynchronous code.

Pass data between sibling components using React Router by using URL parameters, context API, or lifting state up to a common ancestor component.

useRef()   creates a mutable variable which will not re-render components, and used to access the DOM element directly
useMemo()
is like useEffcet()  hook but we return memorize value in useMemo() The useMemo hook in React is a performance optimization tool that helps in memoizing the result of a computation.
useCallback()  is return memorize fnction
The useCallback hook in React is used to memoize callback functions, preventing them from being recreated on every render unless their dependencies change. This can help improve performance, especially when passing callbacks to child components that rely on referential equality to prevent unnecessary renders.
A custom hook is essentially a JavaScript function whose name starts with use. It can call other hooks inside it to handle state and side effects.


The callback here refers to the useCallback hook. useCallback is used to memoize functions so that they are only redefined when their dependencies change. This is useful for performance optimization, especially when passing callbacks to child components that rely on reference equality to prevent unnecessary re-renders.

The memo function is a higher-order component (HOC) that memoizes a functional component, preventing it from re-rendering if its props havenâ€™t changed. This is useful for optimizing performance by skipping unnecessary renders.

The useEffect hook is used to handle side effects in functional components. It runs after the render is committed to the screen and can be configured to run only when certain dependencies change.


