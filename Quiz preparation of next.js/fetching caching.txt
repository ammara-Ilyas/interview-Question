Which method does Next.js extend to allow configuration of caching and revalidating behavior on the server?

A. Axios
B. fetch
C. XMLHttpRequest
D. jQuery.ajax
Answer: B
Where can you use fetch with async/await in a Next.js application?

A. Client Components
B. Server Components, Route Handlers, and Server Actions
C. Only in Client Components
D. Only in middleware
Answer: B
What happens if a fetch request inside a Server Component fails?

A. The request is retried indefinitely
B. The closest error.js Error Boundary is activated
C. The application crashes
D. The request is silently ignored
Answer: B
How can you indicate a fetch request should not be cached?

A. Set cache: 'force-cache'
B. Set cache: 'no-store'
C. Set cache: 'default'
D. Set cache: 'immutable'
Answer: B
What is the default caching behavior for fetch requests in Next.js?

A. cache: 'no-store'
B. cache: 'default'
C. cache: 'force-cache'
D. cache: 'immutable'
Answer: C
Which fetch option allows you to set the cache lifetime of a resource in seconds?

A. next.revalidate
B. cache.revalidate
C. revalidate.cache
D. fetch.cache
Answer: A
How can you revalidate data on demand in Next.js?

A. Using revalidate: 'on-demand'
B. By calling revalidateTag or revalidatePath
C. By setting cache: 'no-store'
D. By calling revalidateNow
Answer: B
Which segment configuration option can be used to skip caching by default in a route segment?

A. skipCache
B. noCache
C. fetchCache
D. forceCache
Answer: C
How can you tag cache entries when using fetch in Next.js?

A. Using the cacheTags option
B. Using the tags option within next
C. Using the cache option within fetch
D. Using the next.cache option
Answer: B
Which of the following methods will make a fetch request revalidate every hour?

A. fetch('https://...', { next: { revalidate: 3600 } })
B. fetch('https://...', { cache: 'no-store', revalidate: 3600 })
C. fetch('https://...', { revalidate: 'hourly' })
D. fetch('https://...', { cache: 'hourly' })
Answer: A
Which library is recommended for fetching data on the client with caching and revalidating features?

A. Axios
B. SWR
C. jQuery
D. lodash
Answer: B
In Next.js, what is the default behavior of fetch requests in Server Actions?

A. They are cached indefinitely
B. They are cached for 24 hours
C. They are not cached (cache: no-store)
D. They are cached based on the request method
Answer: C
What is the purpose of the revalidateTag function in Next.js?

A. To tag cache entries for easier identification
B. To revalidate all cache entries associated with a specific tag
C. To create a new cache tag
D. To delete a cache tag
Answer: B
When fetching data on the client, why might you use a Route Handler instead of fetching data directly in the component?

A. To expose sensitive information to the client
B. To avoid exposing sensitive information to the client
C. To reduce the amount of code in the Route Handler
D. To increase the complexity of the application
Answer: B
What is the recommended TypeScript version for using async/await in a Server Component?

A. 4.0.0 or higher
B. 4.5.2 or higher
C. 5.1.3 or higher
D. 3.9.7 or higher
Answer: C
How does Next.js handle errors when attempting to revalidate data?

A. It serves a 404 error page
B. It retries the request indefinitely
C. It serves the last successfully generated data
D. It logs the error and does nothing
Answer: C
What can you use to configure the caching and revalidating behavior of third-party library requests in Next.js?

A. Route Segment Config Option and React's cache function
B. Route Handler and SWR
C. React's useState and useEffect
D. cacheConfig and fetchSettings
Answer: A
How can you revalidate a statically rendered route segment with multiple fetch requests having different revalidation frequencies?

A. Each fetch request is revalidated independently
B. The highest revalidation frequency is used for all requests
C. The lowest revalidation frequency is used for all requests
D. Revalidation is disabled for all requests
Answer: C
Which of the following will ensure a fetch request is dynamically fetched on every request?

A. fetch('https://...', { cache: 'force-cache' })
B. fetch('https://...', { cache: 'immutable' })
C. fetch('https://...', { cache: 'no-store' })
D. fetch('https://...', { cache: 'default' })
Answer: C
Which React function is experimental and not recommended for wrapping fetch in Client Components?

A. useEffect
B. useState
C. use
D. useContext
Answer: C